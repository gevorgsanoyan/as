
<!DOCTYPE HTML>

<html>
<head>
    <!-- Force latest IE rendering engine or ChromeFrame if installed -->
    <!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><![endif]-->
    <meta charset="utf-8">
    <title>jQuery File Upload Demo - Basic version</title>
    <meta name="description" content="File Upload widget with multiple file selection, drag&amp;drop support and progress bar for jQuery. Supports cross-domain, chunked and resumable file uploads. Works with any server-side platform (PHP, Python, Ruby on Rails, Java, Node.js, Go etc.) that supports standard HTML form file uploads.">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Bootstrap styles -->
    <link rel="stylesheet" href="~/Content/bootstrap.min.css">
    <!-- Generic page styles -->
    <link rel="stylesheet" href="~/Content/jQuery.FileUpload/css/style.css">
    <!-- CSS to style the file input field as button and adjust the Bootstrap progress bars -->
    <link rel="stylesheet" href="~/Content/jQuery.FileUpload/css/jquery.fileupload.css">
</head>
<body>
 
    <div class="container">
     
        <br>
        <!-- The fileinput-button span is used to style the file input field as button -->
        <span class="btn btn-success fileinput-button">
            <i class="glyphicon glyphicon-plus"></i>
            <span>Select files...</span>
            <!-- The file input field used as target for the file upload widget -->
            <input id="fileupload" type="file" name="files[]" multiple
                   data-sequential-uploads="true"
           data-form-data='{"script": "true"}'>
        </span>
        <br>
        <br>
        <!-- The global progress bar -->
        <div id="progress" class="progress">
            <div class="progress-bar progress-bar-success"></div>
        </div>
        <!-- The container for the uploaded files -->
        <div id="files" class="files"></div>
        <br>
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">Notes</h3>
            </div>
            <div class="panel-body">
                <ul>
                    <li>The maximum file size for uploads in this demo is <strong>15 MB</strong> (default file size is unlimited).</li>
                    @*<li>Only image files (<strong>JPG, GIF, PNG</strong>) are allowed in this demo (by default there is no file type restriction).</li>*@
                    @*<li>Uploaded files will be deleted automatically after <strong>5 minutes or less</strong> (demo files are stored in memory).</li>*@
                    <li>You can <strong>drag &amp; drop</strong> files from your desktop on this webpage (see <a href="https://github.com/blueimp/jQuery-File-Upload/wiki/Browser-support">Browser support</a>).</li>
                    @*<li>Please refer to the <a href="https://github.com/blueimp/jQuery-File-Upload">project website</a> and <a href="https://github.com/blueimp/jQuery-File-Upload/wiki">documentation</a> for more information.</li>
                    <li>Built with the <a href="http://getbootstrap.com/">Bootstrap</a> CSS framework and Icons from <a href="http://glyphicons.com/">Glyphicons</a>.</li>*@
                </ul>
            </div>
        </div>
    </div>
    <script src="~/Scripts/jquery-3.2.1.min.js"></script>
    <!-- The jQuery UI widget factory, can be omitted if jQuery UI is already included -->
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    <!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
    <script src="~/Scripts/jQuery.FileUpload/jquery.iframe-transport.js"></script>
    <!-- The basic File Upload plugin -->
    <script src="~/Scripts/jQuery.FileUpload/jquery.fileupload.js"></script>
    <!-- Bootstrap JS is not required, but included for the responsive demo navigation -->
    <script src="~/Scripts/bootstrap.min.js"></script>


    <!-- The Load Image plugin is included for the preview images and image resizing functionality -->
    <script src="~/Scripts/JavaScript-Load-Image/load-image.all.min.js"></script>
    <!-- The Canvas to Blob plugin is included for image resizing functionality -->
    <script src="~/Scripts/JavaScript-Canvas-to-Blob/canvas-to-blob.min.js"></script>
   
   
    <!-- The File Upload processing plugin -->
    <script src="~/Scripts/jQuery.FileUpload/jquery.fileupload-process.js"></script>
    <!-- The File Upload image preview & resize plugin -->
    <script src="~/Scripts/jQuery.FileUpload/jquery.fileupload-image.js"></script>
    <!-- The File Upload audio preview plugin -->
    <script src="~/Scripts/jQuery.FileUpload/jquery.fileupload-audio.js"></script>

    <!-- The File Upload video preview plugin -->
    <script src="~/Scripts/jQuery.FileUpload/jquery.fileupload-video.js"></script>
   
    <!-- The File Upload validation plugin -->
    <script src="~/Scripts/jQuery.FileUpload/jquery.fileupload-validate.js"></script>
    


    <script>



        /*jslint unparam: true */
        /*global window, $ */

        $(function () {
            'use strict';
        // Change this to the location of your server-side upload handler:
        var url = 
                 'UploadFile/',
                uploadButton = $('<button />')
                    .addClass('btn btn-primary')
                    .prop('disabled', true)
                    .text('Processing...')
                    .on('click', function () {
                        var $this = $(this),
                            data = $this.data();
                        $this
                            .off('click')
                            .text('Abort')
                            .on('click', function () {
            $this.remove();
        data.abort();
                            });
                        data.submit().always(function () {
            $this.remove();
        });
                    });
            $('#fileupload').fileupload({
            url: url,
                dataType: 'json',
                autoUpload: false,
                //acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
                maxFileSize: 15728640,
                // Enable image resizing, except for Android and Opera,
                // which actually support image resizing, but fail to
                // send Blob objects via XHR requests:
                disableImageResize: /Android(?!.*Chrome)|Opera/
                    .test(window.navigator.userAgent),
                previewMaxWidth: 100,
                previewMaxHeight: 100,
                previewCrop: true
            }).on('fileuploadadd', function (e, data) {
            data.context = $('<div/>').appendTo('#files');
        $.each(data.files, function (index, file) {
                    var node = $('<p />')
                        .append($('<span />').text(file.name));
                    if (!index) {
            node
                .append('<br>')
                .append(uploadButton.clone(true).data(data));
        }
                    node.appendTo(data.context);
                });
            }).on('fileuploadprocessalways', function (e, data) {
                var index = data.index,
                    file = data.files[index],
                    node = $(data.context.children()[index]);
                if (file.preview) {
            node
                .prepend('<br>')
                .prepend(file.preview);
        }
                if (file.error) {
            node
                .append('<br>')
                .append($('<span class="text-danger"/>').text(file.error));
        }
                if (index + 1 === data.files.length) {
            data.context.find('button')
                .text('Upload')
                .prop('disabled', !!data.files.error);
        }
            }).on('fileuploadprogressall', function (e, data) {
                var progress = parseInt(data.loaded / data.total * 100, 10);
                $('#progress .progress-bar').css(
                    'width',
                    progress + '%'
                );
            }).on('fileuploaddone', function (e, data) {
            $.each(data.result.files, function (index, file) {
                if (file.url) {
                    var link = $('<a>')
                        .attr('target', '_blank')
                        .prop('href', file.url);
                    $(data.context.children()[index])
                        .wrap(link);
                } else if (file.error) {
                    var error = $('<span class="text-danger"/>').text(file.error);
                    $(data.context.children()[index])
                        .append('<br>')
                        .append(error);
                }
            });
        }).on('fileuploadfail', function (e, data) {
            $.each(data.files, function (index) {
                var error = $('<span class="text-danger"/>').text('File upload failed.');
                $(data.context.children()[index])
                    .append('<br>')
                    .append(error);
            });
        }).prop('disabled', !$.support.fileInput)
                .parent().addClass($.support.fileInput ? undefined : 'disabled');
        });


        //function SaveFiles() {

        //    var fileInput = document.getElementById('fileupload');
        //    var file = $("#fileupload").val();

        //    if (file.length > 0) {
        //        var fd = new FormData();
        //        var xhr = new XMLHttpRequest();
        //        xhr.open('POST', '/Upload/UploadFile');
        //        xhr.setRequestHeader('Content-type', 'multipart/form-data');

        //        //Appending file information in Http headers
        //        xhr.setRequestHeader('X-File-Name', fileInput.files[0].name);
        //        xhr.setRequestHeader('X-File-Type', fileInput.files[0].type);
        //        xhr.setRequestHeader('X-File-Size', fileInput.files[0].size);
        //        xhr.setRequestHeader['X-File-FileName', 1];
        //        xhr.setRequestHeader['X-File-Id', id];

        //        //Sending file in XMLHttpRequest
        //        xhr.send(fileInput.files[0]);
        //        xhr.onreadystatechange = function (data) {

        //            if (xhr.readyState == 4 && xhr.status == 200) {

        //                alert("Image Uploaded Successfully...");

        //            }
        //        }
        //    }
        //}



    </script>





    @*<script id="template-download" type="text/x-tmpl">
        {% for (var i=0, file; file=o.files[i]; i++) { %}
        <tr class="template-download fade">
            {% if (file.error) { %}
            <td></td>
            <td class="name"><span>{%=file.name%}</span></td>
            <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
            <td class="error" colspan="2"><span class="label label-important">{%=locale.fileupload.error%}</span> {%=locale.fileupload.errors[file.error] || file.error%}</td>
            {% } else { %}
            <td class="preview">
                {% if (file.thumbnail_url) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" rel="gallery" download="{%=file.name%}"><img src="{%=file.thumbnail_url%}"></a>
                {% } %}
            </td>
            <td class="name">
                <a href="{%=file.url%}" title="{%=file.name%}" rel="{%=file.thumbnail_url&&'gallery'%}" download="{%=file.name%}">{%=file.name%}</a>
            </td>
            <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
            <td colspan="2"></td>
            {% } %}
            <td class="delete">
                <button class="btn btn-danger" data-type="{%=file.delete_type%}" data-url="{%=file.delete_url%}">
                    <i class="icon-trash icon-white"></i>
                    <span>{%=locale.fileupload.destroy%}</span>
                </button>
                <input type="checkbox" name="delete" value="1">
            </td>
        </tr>
        {% } %}
    </script>*@



</body>
</html>
